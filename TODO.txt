Implement

    Spy
        Lots of checking on what you can call, when
        Split out the spy methods, to make it easier with auto-complete
        Defer the calculations of which call number to return, so there's more flexibility in the order?


    Think about 'allowAnyCall'
        Default to 'true' - so spy is easy to set up
        If expects is set, then set back to false
            UNLESS 'allowAnyCall' is called explicitly

    Think about 'withAnyParameter' a bit more
        Need some error conditions, in case you try to set up something invalid

    Think about 'only checking a single parameter'
        withParameterAtPosition

    Type checking prior to checking equality - otherwise you get an indecipherable error

    No need to set 'withAnyParameter' - just imply it from the absence of parameters

    handledBy
        Can use standard Stub interface
        Can use a simplified Stub interface

    Need to be able to test:

        TestMock templateGenerator = new TestMock( TemplateGenerator.class );

        templateGenerator
            .expects()
            .method( 'generate' )
            .withParameter( 'Opportunity' )
            .andParameter( 'Opportunity_Products_Offered' )
            .andParameter( new Set<Id>{ opportunityLineItemList[0].OpportunityId } ) // only, this isn't set yet
            .returning( new Map<Id,String>{ opportunityLineItemList[0].OpportunityId => 'The generated Template' } ); // and here too

        Maybe:

        templateGenerator
            .expects()
            .method( 'generate' )
            .withParameter( 'Opportunity' )
            .andParameter( 'Opportunity_Products_Offered' )
            .andAnyParameter()
            .handledBy( new TemplateGeneratorMockHandler() );

    
        System.assertEquals( templateGenerator.called( 'generate' ).number( 1 ).parameter( 3 ).was() )

        That's why we need a spy, and a 'handled by'

        assertContains

Test:
    The behaviours work with Sobjects
    The behaviours work with Object instantiations

Think:
    How to pass 'expects parameter' when we're passing sObjects?
